144/24
library(blogdown)
library(readxl)
raw_data <- read_excel("~/ARC_hardware_needs 2.xlsx")
head(raw_data)
32/12
setwd("~/RES_site_academic")
blogdown:::serve_site()
blogdown::install_hugo(force = TRUE)
pwd
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
servr::daemon_stop(3)
servr::daemon_stop(3)
servr::daemon_stop(2)
servr::daemon_stop(1)
blogdown::build_site()
blogdown::serve_site()
1400*24/(36*60)
1444*24/(39*60)
3470*24/(99*60)
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
3000/8
3000/9
3000/400
?libPaths()
?.libPaths
20480/1024
setwd("~/Projects/ARC_admin_stuff/Cost_center")
setwd("~/Projects/ARC_admin_stuff/Cost_center/2020-08 Scripts")
## importing, munging and creating summaries
## by sheet as indicated by section
library(data.table)
library(xlsx)
library(doBy)
library(dplyr)
############
## customers/fund numbers
############
customers <- read.xlsx("../CCF_customers_funds.xlsx",1)
customer_fund_list <- fread("../CCF_fund_list.csv")
############
## rates
############
billing_rates <- read.xlsx("../CCF_min_rates.xlsx",1,startRow = 3)
rownames(billing_rates) <- billing_rates[,1]
billing_rates <- billing_rates[,-1]
days_per_month <- 30 ## should automatically figure this out based on file names
days_per_month <- 31 ## should automatically figure this out based on file names
billing_period <- "2020-08"
overall_summary <- data.frame(Fund=NA,CAN=NA,Service=NA,Charge=NA)
############
## dedicated server hosting
############
dedicated_server_hosting_file <- paste0(billing_period,"-Dedicated.txt")
dedicated_server_hosting <- fread(dedicated_server_hosting_file,stringsAsFactors = FALSE, header = TRUE)
colnames(dedicated_server_hosting) <- c("Name", "Fund", "Days")
dedicated_server_hosting$Charge <- ifelse(dedicated_server_hosting$Fund=="230231",0,
billing_rates$dedicated_server_std[1]*dedicated_server_hosting$Days/days_per_month)
dedicated_server_hosting$CAN <- "NA"
dedicated_server_hosting <- dedicated_server_hosting[,c("CAN","Name","Fund","Days","Charge")]
overall_summary <- cbind("Dedicated Server Hosting",summaryBy(Charge~Fund,dedicated_server_hosting,FUN = sum,keep.names=TRUE))
############
## Server Hosting (VMWare Hosting)
############
server_hosting_VMWare_file <- paste0(billing_period,"-VMWare-Hosting.csv")
server_hosting_VMWare <- fread(server_hosting_VMWare_file,stringsAsFactors = FALSE, header = TRUE, select = c(1,2))
colnames(server_hosting_VMWare) <- c("VMName", "Fund")
server_hosting_VMWare$Charge <- ifelse(server_hosting_VMWare$Fund=="230231",0,
billing_rates$server_hosting[1])
server_hosting_VMWare$CAN <- NA
server_hosting_VMWare <- server_hosting_VMWare[,c("CAN","VMName","Fund","Charge")]
overall_summary <- rbind(overall_summary,cbind("Server Hosting VMWare",summaryBy(Charge~Fund,server_hosting_VMWare,FUN = sum,keep.names=TRUE)))
############
## Shared Server Hosting (VMWare Hosting)
############
shared_server_hosting_file <- paste0(billing_period,"-VMWare-Hosting.csv")
shared_server_hosting <- fread(shared_server_hosting_file,stringsAsFactors = FALSE, header = TRUE, select = c(1,3))
colnames(shared_server_hosting) <- c("VMName", "Fund")
shared_server_hosting$Charge <- ifelse(shared_server_hosting$Fund=="230231",0,
billing_rates$shared_server_hosting[1])
shared_server_hosting$CAN <- NA
shared_server_hosting <- shared_server_hosting[,c("CAN","VMName","Fund","Charge")]
overall_summary <- rbind(overall_summary,cbind("Shared Server Hosting VMWare",summaryBy(Charge~Fund,shared_server_hosting,FUN = sum,keep.names=TRUE)))
############
## Storage hosting
############
storage_hosting_file <- paste0(billing_period,"-StorageHosting.txt")
storage_hosting <- fread(storage_hosting_file,stringsAsFactors = FALSE, header = TRUE)
############
## Server Hosting
############
server_hosting_file <- paste0(billing_period,"-ServerHosting.txt")
server_hosting <- fread(server_hosting_file,stringsAsFactors = FALSE, header = TRUE)
server_hosting$Charge <- ifelse(server_hosting$Fund=="230231",0,
billing_rates$server_hosting[1])
server_hosting$CAN <- NA
server_hosting <- server_hosting[,c("CAN","Name","Fund","Days","Charge")]
overall_summary <- rbind(overall_summary,cbind("Server Hosting",summaryBy(Charge~Fund,server_hosting,FUN = sum,keep.names=TRUE)))
############
## Enterprise Disk Storage
############
enterprise_disk_file <- paste0(billing_period,"-EnterpriseStorage-v5k.txt")
enterprise_disk <- fread(enterprise_disk_file)
enterprise_disk$thin_size_GB <- 0
for(i in 1:nrow(enterprise_disk)){
if(grepl("TB",enterprise_disk$thin_size[i])){
enterprise_disk$thin_size_GB[i] <- as.numeric(gsub("TB","",enterprise_disk$thin_size[i]))*1024
}
if(grepl("GB",enterprise_disk$thin_size[i])){
enterprise_disk$thin_size_GB[i] <- as.numeric(gsub("GB","",enterprise_disk$thin_size[i]))
}
}
enterprise_disk <- merge(enterprise_disk,customer_fund_list[,2:3],by.x="name",by.y="Name",all.x=TRUE)
enterprise_disk$Charge <- ifelse(enterprise_disk$Fund=="230231",0,
enterprise_disk$thin_size_GB * billing_rates$enterprise_disk[1])
enterprise_disk$CAN <- NA
enterprise_disk <- enterprise_disk[,c("CAN", "name", "id", "capacity", "thin_size", "thin_size_GB", "Fund", "Charge")]
overall_summary <- rbind(overall_summary,cbind("Enterprise Disk Storage",summaryBy(Charge~Fund,enterprise_disk,FUN = sum,keep.names=TRUE)))
############
## TSM
############
tsm_file <- paste0(billing_period,"-EnterpriseStorage-v5k.txt")
tsm <- fread("awk '$2~/00/' 2020-06-TSM-backup.txt", col.names=c("NodeName","BackupUsed","ArchiveUsed","SpaceManagedUsed","TotalUsed"))
tsm <- fread("awk '$2~/00/' 2020-08-TSM-backup.txt", col.names=c("NodeName","BackupUsed","ArchiveUsed","SpaceManagedUsed","TotalUsed"))
tsm$TotalUsed <- as.numeric(gsub(",","",tsm$TotalUsed))
tsm <- merge(tsm,customer_fund_list[,2:3],by.x="NodeName",by.y="Name",all.x=TRUE)
tsm$Charge <- ifelse(tsm$Fund=="230231",0,
tsm$TotalUsed * billing_rates$backup[1] / 1024)
tsm$Charge <- ifelse(tsm$Fund=="NA",0,tsm$Charge)
tsm$CAN <- NA
tsm <- tsm[,c("CAN", "NodeName", "BackupUsed", "ArchiveUsed", "SpaceManagedUsed", "TotalUsed", "Fund", "Charge")]
overall_summary <- rbind(overall_summary,cbind("TSM",summaryBy(Charge~Fund,tsm,FUN = sum,keep.names=TRUE)))
############
## HPC Compute Stnd Mode
############
hpc_std_file <- paste0(billing_period,"-HPC-slurm-std.txt")
hpc_std <- fread(hpc_std_file)
hpc_std <- merge(hpc_std,customer_fund_list[,2:3],by.x="Account",by.y="Name",all.x=TRUE)
hpc_std$CoreHours <- ifelse(hpc_std$Fund=="230231",0,
hpc_std$CPUTimeRAW / 60 / 60 )
hpc_std$CAN <- NA
hpc_std_summary <- summaryBy(CoreHours ~ Account + Fund, data=hpc_std, FUN=sum)
hpc_std_summary$Charge <- hpc_std_summary$CoreHours.sum * billing_rates$HPC_std[1]
overall_summary <- rbind(overall_summary,cbind("HPC Compute Standard",hpc_std_summary[,c(2,4)]))
############
## HPC Compute GPU Mode
############
hpc_gpu_file <- paste0(billing_period,"-HPC-slurm-gpu.txt")
hpc_gpu <- fread(hpc_gpu_file)
hpc_gpu$Charge <- NA
if(nrow(hpc_gpu)>1){
hpc_gpu$Charge <- ifelse(hpc_gpu$Fund=="230231",0,
hpc_gpu$CPUTimeRAW / 60 * billing_rates$HPC_gpu[1])
hpc_gpu <- merge(hpc_gpu,customer_fund_list[,2:3],by.x="Account",by.y="Name",all.x=TRUE)
hpc_gpu$CAN <- NA
overall_summary <- rbind(overall_summary,cbind("HPC Compute GPU","XXXXX"))
}
############
## GPFS Provisioning
############
gpfs_file <- paste0(billing_period,"_GPFS Provisioning.xlsx")
gpfs <- read.xlsx("2020-06_GPFS Provisioning.xlsx",1)
colnames(gpfs) <- c("Fileset","RequestedAddition","Fund","Requestor","Comments")
############
## Storage hosting
############
storage_hosting_file <- paste0(billing_period,"-StorageHosting.txt")
storage_hosting <- fread(storage_hosting_file,stringsAsFactors = FALSE, header = TRUE)
############
## GPFS Provisioning
############
gpfs_file <- paste0(billing_period,"_GPFS Provisioning.xlsx")
gpfs <- read.xlsx("2020-08_GPFS Provisioning.xlsx",1)
colnames(gpfs) <- c("Fileset","RequestedAddition","Fund","Requestor","Comments")
############
## GPFS Provisioning
############
gpfs_file <- paste0(billing_period,"-GPFS.txt")
gpfs <- fread(gpfs_file)
gpfs
colnames(gpfs) <- c("RequestedAddition","Requestor","Fund","Comments")
gpfs$Charge <- ifelse(gpfs$Fund=="230231",0,
gpfs$RequestedAddition * as.numeric(billing_rates$GPFS_provisioning[1]))
gpfs$CAN <- NA
gpfs
############
## GPFS Provisioning
############
gpfs_file <- paste0(billing_period,"-GPFS.txt")
gpfs <- fread(gpfs_file)
colnames(gpfs) <- c("RequestedAddition","Fileset","Fund","Comments")
gpfs$Charge <- ifelse(gpfs$Fund=="230231",0,
gpfs$RequestedAddition * as.numeric(billing_rates$GPFS_provisioning[1]))
gpfs$CAN <- NA
gpfs
gpfs <- gpfs[,c("CAN","Fileset", "RequestedAddition", "Fund", "Comments", "Charge")]
overall_summary <- rbind(overall_summary,cbind("GPFS Provisioning",summaryBy(Charge~Fund,gpfs,FUN = sum,keep.names=TRUE)), use.names=FALSE)
############
## Create Summary
############
# part 1 is summary by service
# part 2 is itemized list by fund
# part 3 need to walk through
summary_by_service <- data.frame(DedicatedServerHosting = sum(dedicated_server_hosting$Charge,na.rm=TRUE),
ServerHostingVMWare=sum(server_hosting_VMWare$Charge,na.rm=TRUE),
SharedServerHosting=sum(shared_server_hosting$Charge,na.rm=TRUE),
ServerHosting=sum(server_hosting$Charge,na.rm=TRUE),
EnterpriseDiskStorage=sum(enterprise_disk$Charge,na.rm=TRUE),
TSM=sum(tsm$Charge,na.rm=TRUE),
HPCComputeStandardNode=sum(hpc_std_summary$Charge,na.rm=TRUE),
HPCComputeGPUNode=sum(hpc_gpu$Charge,na.rm=TRUE),
GPFSProvisioning=sum(gpfs$Charge,na.rm=TRUE))
overall_summary <- overall_summary[!is.na(overall_summary$Charge),]
overall_summary <- overall_summary[overall_summary$Charge>0,]
setorder(overall_summary,Fund)
colnames(overall_summary) <- c("Service","Fund","Charge")
############
## Write Summary
############
summary_file <- paste0("HPC-billing-",billing_period,".xlsx")
write.xlsx(overall_summary, file=summary_file, sheetName="Summary1", append = FALSE, row.names=FALSE)
write.xlsx(summary_by_service, file=summary_file, sheetName="Summary2", append=TRUE, row.names=FALSE)
write.xlsx(dedicated_server_hosting, file=summary_file, sheetName="Dedicated Server Hosting", append=TRUE, row.names=FALSE)
write.xlsx(server_hosting, file=summary_file, sheetName="Server Hosting (VMWare)", append=TRUE, row.names=FALSE)
write.xlsx(shared_server_hosting, file=summary_file, sheetName="Shared Server Hosting (VMWare)", append=TRUE, row.names=FALSE)
#write.xlsx(storage_hosting, file=summary_file, sheetName="Storage Hosting", append=TRUE, row.names=FALSE)
write.xlsx(server_hosting, file=summary_file, sheetName="Server Hosting", append=TRUE, row.names=FALSE)
write.xlsx(enterprise_disk, file=summary_file, sheetName="Enterprise Disk Storage", append=TRUE, row.names=FALSE)
write.xlsx(tsm, file=summary_file, sheetName="TSM", append=TRUE, row.names=FALSE)
write.xlsx(hpc_std, file=summary_file, sheetName="HPC Compute Stnd Mode", append=TRUE, row.names=FALSE)
write.xlsx(hpc_gpu, file=summary_file, sheetName="HPC Compute GPU Mode", append=TRUE, row.names=FALSE)
write.xlsx(gpfs, file=summary_file, sheetName="GPFS Provisioning", append=TRUE, row.names=FALSE)
for(i in 1:10){ i }
for(i in 1:10){ cat(i,"\n") }
set.seed(1000)
rbinom(5)
rbinom(5,2)
rbinom(5,size=2)
rbinom(5,size=2,prob=.2)
rbinom(5,size=2,prob=.2)
set.seed(1000)
rbinom(5,size=2,prob=.2)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
graphics.off()
options(stringsAsFactors=FALSE)
require(beeswarm)
#BiocManager::install("DESeq2")
library("DESeq2")
library("gplots")
library("ggplot2")
#library("doBy")
library("plyr")
#install.packages("tidyr")
library("tidyr")
# biocLite("BiocParallel")
# library("BiocParallel")
# BPPARAM=MulticoreParam(workers=10)
#library(DAAG)
#library("RColorBrewer")
#library("pheatmap")
#library(readxl)
# biocLite("BiocParallel")
# library("BiocParallel")
# BPPARAM=MulticoreParam(workers=10)
#library(DAAG)
#library("RColorBrewer")
#library("pheatmap")
library(readxl)
setwd("~/Projects/Valdez_May2020")
annotated_expt_design_data_frame_FULL<-read_xls("Valdez_May2020_ED.xlsx",sheet=1)
annotated_expt_design_data_frame_FULL<-read_excel("Valdez_May2020_ED.xlsx",sheet=1)
annotated_expt_design_data_frame_FULL
annotated_expt_design_data_frame_FULL
setwd("~/Projects/Valdez_May2020/recounts/")
annotated_expt_design_data_frame_FULL<-read_excel("Valdez_May2020_ED.xlsx",sheet=1)
annotated_expt_design_data_frame_FULL
setwd("~/Projects/Valdez_May2020/recounts/")
annotated_expt_design_data_frame_FULL<-read_excel("Valdez_May2020_ED.xlsx",sheet=1)
annotated_expt_design_data_frame_FULL
annotated_expt_design_data_frame_FULL<-read_excel("~/Projects/Valdez_May2020/recounts/Valdez_May2020_ED_all.xlsx",sheet=1)
head(annotated_expt_design_data_frame_FULL)
tail(annotated_expt_design_data_frame_FULL)
##remove any rows that dont have count data
for (i in nrow(annotated_expt_design_data_frame_FULL):1) {
if (annotated_expt_design_data_frame_FULL$FileName[i] == "") {
annotated_expt_design_data_frame_FULL<-annotated_expt_design_data_frame_FULL[-i,]
}
}
setwd("~/Projects/Valdez_May2020/recounts/")
##remove any rows that dont have count data
for (i in nrow(annotated_expt_design_data_frame_FULL):1) {
if (annotated_expt_design_data_frame_FULL$FileName[i] == "") {
annotated_expt_design_data_frame_FULL<-annotated_expt_design_data_frame_FULL[-i,]
}
}
temp<-NULL
tempname<-NULL
temp_ED<-annotated_expt_design_data_frame_FULL
temp_ED<-temp_ED[!duplicated(temp_ED$SampleID),]
annotated_expt_design_data_frame_FULL<-temp_ED
temp<-read.delim(paste0("~/Projects/Valdez_May2020/recounts/",temp_ED$FileName[1]),
sep="\t",header=F,stringsAsFactors=F)
temp
temp
temp<-NULL
tempname<-NULL
temp_ED<-annotated_expt_design_data_frame_FULL
temp_ED<-temp_ED[!duplicated(temp_ED$SampleID),]
annotated_expt_design_data_frame_FULL<-temp_ED
temp<-read.delim(paste0("~/Projects/Valdez_May2020/recounts/",temp_ED$FileName[1]),
sep="\t",header=F,stringsAsFactors=F)
for(i in 1:length(temp_ED$SampleID)){
current_sample<-temp_ED$SampleID[i]
print(current_sample)
current_file<-temp_ED$FileName[i]
print(current_file)
temp_file_list<-current_file
#temp_file_list<-dir(pattern=current_sample)
num_files<-length(temp_file_list)+1
print(temp_file_list)
print("now loading files...")
j<-1
temp1<-read.delim(paste0("~/Projects/Valdez_May2020/recounts/",temp_file_list[j]),row.names=1,header=F,stringsAsFactors=F)
print(temp_file_list[j])
j<-j+1
while(j < num_files) {
temp2<-read.delim(paste0("~/Projects/Valdez_May2020/recounts/",temp_file_list[j]),row.names=1,header=F,stringsAsFactors=F)
print(temp_file_list[j])
temp1<-cbind(temp1,temp2)
j<-j+1
}
temp3<-data.frame(rowSums(temp1))
colnames(temp3)<-current_sample
temp<-cbind(temp,temp3)
}
temp<-temp[,-c(1:2)]  #first 2 columns were used as a placeholder to make sure the cbinds would work
HTSeq_count_df_list<-temp
head(HTSeq_count_df_list)
tail(HTSeq_count_df_list)
HTSeq_gene_ALL<-temp[1:(nrow(temp)-5),]
rm(temp)
rm(temp1)
rm(temp2)
rm(temp3)
rm(tempname)
colnames(HTSeq_count_df_list)
head(HTSeq_count_df_list)
temp_ED
factor(temp_ED$Age)
factor(temp_ED$Comment)
factor(temp_ED$Comment)$Levels
factor(temp_ED$Comment)@Levels
factor(temp_ED$Comment)
levels(temp_ED$Comment)
levels(factor(temp_ED$Comment))
temp_ED[1:20,]
greg_samples <- HTSeq_count_df_list %>%
select(colnames(HTSeq_count_df_list) %in% 1:18) %>%
filter(rowSums(temp_ED)>1)
library(dplyr)
greg_samples <- HTSeq_count_df_list %>%
select(colnames(HTSeq_count_df_list) %in% 1:18) %>%
filter(rowSums(temp_ED)>1)
?select
greg_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",1:18)) %>%
filter(rowSums(temp_ED)>1)
greg_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",1:18))
head(greg_samples)
?filter
grep_samples <- greg_samples[rowSums(greg_samples)>1,]
head(grep_samples)
dim(grep_samples)
tail(HTSeq_count_df_list)
independent_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",19:49))
independent_samples <- independent_samples[rowSums(independent_samples)>1,]
head(independent_samples)
tail(independent_samples)
greg_samples <- greg_samples[-c((nrow(greg_samples)-5):nrow(greg_samples)),]
tail(greg_samples)
greg_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",1:18))
greg_samples <- greg_samples[rowSums(greg_samples)>1,]
greg_samples <- greg_samples[-c((nrow(greg_samples)-4):nrow(greg_samples)),]
tail(greg_samples)
greg_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",1:18))
greg_samples <- greg_samples[rowSums(greg_samples)>1,]
tail(greg_samples)
greg_samples <- greg_samples[-c((nrow(greg_samples)-4):nrow(greg_samples)),]
tail(greg_samples)
greg_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",1:18))
greg_samples <- greg_samples[rowSums(greg_samples)>1,]
dim(greg_samples)
greg_samples[c((nrow(greg_samples)-4):nrow(greg_samples)),]
greg_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",1:18))
greg_samples <- greg_samples[rowSums(greg_samples)>1,]
tail(greg_samples)
tail(HTSeq_count_df_list)
greg_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",1:18))
greg_samples <- greg_samples[-c((nrow(greg_samples)-4):nrow(greg_samples)),]
tail(greg_samples)
greg_samples <- greg_samples[rowSums(greg_samples)>1,]
independent_samples <- HTSeq_count_df_list %>%
select(num_range(prefix="",19:49))
independent_samples <- independent_samples[-c((nrow(independent_samples)-4):nrow(independent_samples)),]
independent_samples <- independent_samples[rowSums(independent_samples)>1,]
tail(independent_samples)
tail(HTSeq_gene_ALL)
tail(greg_samples)
tail(HTSeq_count_df_list)
dim(HTSeq_count_df_list)
dim(HTSeq_gene_ALL)
HTSeq_gene_ALL[54237,1:5]
tail(HTSeq_gene_ALL[,1:5])
greg_samples <- HTSeq_gene_ALL %>%
select(num_range(prefix="",1:18))
norm_factor <- rowSums(HTSeq_gene_ALL)
head(norm_factor)
norm_factor <- colSums(HTSeq_gene_ALL)
head(norm_factor)
norm_factor <- norm_factor/min(norm_factor)
?scale
HTSeq_gene_normed <- scale(HTSeq_gene_ALL,center=FALSE,scale=norm_factor)
colSums(HTSeq_gene_normed)
greg_samples <- HTSeq_gene_normed %>%
select(num_range(prefix="",1:18))
head(HTSeq_gene_normed)
greg_samples <- HTSeq_gene_normed[,1:18]
head(greg_samples)
hist(greg_samples)
greg_samples <- greg_samples[rowSums(greg_samples)>1,]
independent_samples <- HTSeq_gene_normed[,19:49]
independent_samples <- independent_samples[rowSums(independent_samples)>1,]
head(independent_samples)
dim(independent_samples)
greg_samples <- HTSeq_gene_normed[,1:18]
greg_samples <- greg_samples[rowSums(greg_samples)>1,]
head(greg_samples)
dim(greg_samples)
head(greg_samples[greg_samples>1])
greg_samples <- HTSeq_gene_normed[,1:18]
greg_samples[greg_samples<1] <- 0
greg_samples <- greg_samples[rowSums(greg_samples)>1,]
independent_samples <- HTSeq_gene_normed[,19:49]
independent_samples[independent_samples<1] <- 0
independent_samples <- independent_samples[rowSums(independent_samples)>1,]
dim(greg_samples)
dim(independent_samples)
greg_unique <- greg_samples[!(rownames(greg_samples) %in% rownames(independent_samples)),]
dim(greg_unique)
independent_unique <- independent_samples[!(rownames(independent_samples) %in% rownames(greg_samples)),]
dim(independent_unique)
###read in gene->chr maps
###read in gene->chr maps
##add descriptions and write the results again
#biocLite("org.At.tair.db")
#library(org.At.tair.db)
BiocManager::install("GO.db")
###read in gene->chr maps
###read in gene->chr maps
##add descriptions and write the results again
#biocLite("org.At.tair.db")
#library(org.At.tair.db)
BiocManager::install("GO.db")
BiocManager::install("EnsDb.Mmusculus.v79")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(version = "3.11")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR()
updateR(admin_password = 'kCEW[s[_19hks')
BiocManager::install(version = "3.11")
